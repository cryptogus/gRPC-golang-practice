// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: practice_crypto.proto

package pb_in

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AESClient is the client API for AES service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AESClient interface {
	EncryptAES(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	DecryptAES(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
}

type aESClient struct {
	cc grpc.ClientConnInterface
}

func NewAESClient(cc grpc.ClientConnInterface) AESClient {
	return &aESClient{cc}
}

func (c *aESClient) EncryptAES(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/AES/EncryptAES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aESClient) DecryptAES(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/AES/DecryptAES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AESServer is the server API for AES service.
// All implementations must embed UnimplementedAESServer
// for forward compatibility
type AESServer interface {
	EncryptAES(context.Context, *Input) (*Output, error)
	DecryptAES(context.Context, *Input) (*Output, error)
	mustEmbedUnimplementedAESServer()
}

// UnimplementedAESServer must be embedded to have forward compatible implementations.
type UnimplementedAESServer struct {
}

func (UnimplementedAESServer) EncryptAES(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptAES not implemented")
}
func (UnimplementedAESServer) DecryptAES(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptAES not implemented")
}
func (UnimplementedAESServer) mustEmbedUnimplementedAESServer() {}

// UnsafeAESServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AESServer will
// result in compilation errors.
type UnsafeAESServer interface {
	mustEmbedUnimplementedAESServer()
}

func RegisterAESServer(s grpc.ServiceRegistrar, srv AESServer) {
	s.RegisterService(&AES_ServiceDesc, srv)
}

func _AES_EncryptAES_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AESServer).EncryptAES(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AES/EncryptAES",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AESServer).EncryptAES(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _AES_DecryptAES_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AESServer).DecryptAES(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AES/DecryptAES",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AESServer).DecryptAES(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

// AES_ServiceDesc is the grpc.ServiceDesc for AES service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AES_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AES",
	HandlerType: (*AESServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncryptAES",
			Handler:    _AES_EncryptAES_Handler,
		},
		{
			MethodName: "DecryptAES",
			Handler:    _AES_DecryptAES_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "practice_crypto.proto",
}
